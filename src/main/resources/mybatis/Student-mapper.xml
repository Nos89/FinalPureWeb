<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Student">
	
	<select id="selectAllInfo" resultType="kh.spring.dto.StudentInfoDTO">
			select 
	    u.id,u.pw,u.name,u.birth,
	    u.gender,u.country,u.indate,u.outdate,
	    c.col_title,d.dept_title,
	    u.zipcode,u.addr1,u.addr2,u.email,u.phone,
	    u.bank,u.accountnum
			from
	    users u, college c, department d
	    where u.colcode=c.col_code AND u.deptcode=d.dept_code AND id = #{value}
	</select>
	
	<select id="selectArmy" resultType="kh.spring.dto.MilitaryDTO">
			select
		m.std_code,m.mil_indate,m.mil_outdate,g.mil_title,m.mil_rank,m.mil_code
			from military m, militarygroup g
	    where m.mil_groupcode=g.mil_groupcode AND m.std_code= #{id}
	</select>
	
	<select id="selectStuDetail" resultType="kh.spring.dto.StudentDetailDTO">
		select * from students where id = #{id}
	</select>
	
	<update id="stuInfoUpdate">
		update users set zipcode=#{dto.zipcode},addr1=#{dto.addr1},addr2=#{dto.addr2},email=#{dto.email},phone=#{dto.phone},bank=#{dto.bank},accountnum=#{dto.accountnum}
		where id=#{id}
	</update>
	
	<insert id="majorApply">
		insert into ClassRegistration values(ClassRegistration_seq.nextval,#{dto.id},#{dto.lec_code},'정기','신청상태',#{date})
	</insert>
	
	<insert id="takeOffApply">
		insert into takeOffApply values(takeOffapply_seq.nextval,#{dto.id},#{dto.reason},#{dto.takeOff_Year},#{dto.takeOff_Semester},#{dto.expectedReturnYear},#{date},'신청')
	</insert>
	
	<insert id="returnApply">
		insert into returnApply values(returnApply_seq.nextval,#{dto.id},#{dto.reason},#{dto.returnYear},#{dto.returnSemester},#{date},'신청')
	</insert>
	
	<select id="checkTakeOffApply" resultType="Integer">
		select count(*) from takeOffApply where id=#{id} and apply_approve = '신청'
	</select>
	
	<select id="checkReturnApply" resultType="Integer">
		select count(*) from returnApply where id=#{id} and apply_approve = '신청'
	</select>
	
	<select id="checkStatus" resultType="String">
		select std_status from students where id=#{id}
	</select>
	
	<delete id="takeOffCancel">
		delete from TakeOffApply where id=#{id}
	</delete>
	
	<delete id="returnCancel">
		delete from returnApply where id=#{id}
	</delete>
	
	<delete id="changeDeptCancel">
		delete from ChangeDeptApply where id=#{id}
	</delete>
	
	<insert id="changeDeptApply">
		insert into changeDeptApply values(changeDeptApply_seq.nextval,#{dto.id},#{dto.changeYear},#{dto.changeSemester},#{dto.reason},#{dto.changeCollege},#{dto.changeDept},#{date},'신청')
	</insert>
	
	<select id="checkChangeDeptApply" resultType="Integer">
		select count(*) from changeDeptApply where id=#{id} and apply_approve='신청'
	</select>
	
	<select id="selectAllCTS" resultType="kh.spring.dto.ClassTimeSearchDTO">
		select DISTINCT o.oc_code,s.name oc_name,s.isu,u.name pro_name,o.oc_max,o.oc_part,o.oc_targetlevel,CONCAT(CONCAT(o.oc_class_room,CONCAT(c.room_use,':')),o.oc_schedule) oc_schedule,s.reco_score,substr(to_char(o.oc_year,'yyyyMMdd'),3,2) oc_year,o.oc_semester,d.dept_title,c.col_title 
			from college c,users u,professor p,open_class o,subject s,classRoomInfo c,department d 
		where c.col_code = d.col_code and d.dept_code = s.dept_code and u.id = p.pro_id and p.pro_id = o.oc_pro_code and o.oc_code = s.code and c.build_code = substr(o.oc_class_room,1,2)
	</select>
	
	<select id="roomInfo" resultType="kh.spring.dto.RoomInfoDTO">
		select b.build_name,CONCAT(CONCAT(c.build_code,'-'),c.room_num) room_num,c.room_use,c.room_max from buildinfo b,classroominfo c where b.build_code = c.build_code
	</select>
	
	<select id="buildInfo" resultType="kh.spring.dto.BuildInfoDTO">
		select * from buildInfo
	</select>
	
	<select id="getClassTime" resultType="kh.spring.dto.ClassTimeDTO">
		select o.oc_schedule,s.name s_name,u.name p_name from users u,open_class o,subject s where s.code = o.oc_code and o.oc_pro_code = u.id and o.oc_class_room = #{classroom} and substr(to_char(o.oc_year,'yyyyMMdd'),3,2) = #{year} and o.oc_semester = #{semester}
	</select>
	
	<select id="getMyClassTime" resultType="kh.spring.dto.MyClassTimeDTO">
		select o.oc_schedule,s.name s_name,u.name p_name,o.oc_class_room from users u,ClassRegistration c,open_class o,subject s where c.lec_code = s.code and s.code = o.oc_code and o.oc_pro_code = u.id and substr(to_char(o.oc_year,'yyyyMMdd'),3,2) = #{dto.year} and o.oc_semester = #{dto.semester} and c.id = #{id} and c.cr_completeDiv = '완료상태'
	</select>
	
	<select id="getMyClass" resultType="kh.spring.dto.MyClassDTO">
		select DISTINCT o.oc_code,s.name oc_name,s.isu,u.name pro_name,u.phone pro_number,o.oc_schedule,s.reco_score
			from users u,professor p,open_class o,subject s,ClassRegistration c
		where c.lec_code = o.oc_code and u.id = p.pro_id and p.pro_id = o.oc_pro_code and o.oc_code = s.code and c.id=#{id} and substr(to_char(o.oc_year,'yyyyMMdd'),3,2) = #{dto.year} and o.oc_semester = #{dto.semester} and c.cr_completeDiv = '완료상태'
	</select>
	
	<delete id="withdrawMyClass">
		delete from ClassRegistration where id=#{id} and lec_code=#{oc_code} and substr(to_char(cr_date,'yyyyMMdd'),3,2) = #{dto.year}
	</delete>
	
	<select id="getMyClassList" resultType="kh.spring.dto.MyClassListDTO">
		select DISTINCT c.cr_completeDiv,s.isu,o.oc_code,s.name oc_name,o.oc_targetlevel,u.name pro_name,o.oc_schedule,s.reco_score,o.oc_part
			from users u,professor p,open_class o,subject s,ClassRegistration c
		where c.lec_code = o.oc_code and u.id = p.pro_id and p.pro_id = o.oc_pro_code and o.oc_code = s.code and c.id=#{id} and substr(to_char(o.oc_year,'yyyyMMdd'),3,2) = #{dto.year} and o.oc_semester = #{dto.semester} and c.cr_completeDiv = '완료상태'
	</select>
	
	<update id="countDown">
		update open_class set oc_part = oc_part -1 where oc_code = #{oc_code}
	</update>
	
	<select id="getMyGrade" resultType="kh.spring.dto.MyGradeDTO">
		select DISTINCT o.oc_code,s.name oc_name,s.reco_score,s.isu,g.grade_total grade_avg,g.grade_code,u.name pro_name,u.phone pro_number 
 		   from users u,professor p,open_class o,subject s,grade g 
		where u.id = p.pro_id and p.pro_id = o.oc_pro_code and o.oc_code = s.code and g.lec_code = o.oc_code and g.std_id = #{id} and substr(to_char(o.oc_year,'yyyyMMdd'),3,2) = #{dto.year} and o.oc_semester = #{dto.semester}	
	</select>
	
	<select id="getGradeList" resultType="kh.spring.dto.GradeListDTO">
		select DISTINCT s.code oc_code,s.name oc_name,o.oc_targetlevel,s.isu,s.reco_score,g.grade_code 
    		from subject s,grade g,open_class o
		where s.code = o.oc_code and g.lec_code = o.oc_code and g.std_id = #{id} and substr(to_char(o.oc_year,'yyyyMMdd'),3,2) = #{dto.year} and o.oc_semester = #{dto.semester}
	</select>
	
	<select id="getMyElectivesGrade" resultType="kh.spring.dto.GradeListDTO">
		select DISTINCT s.code oc_code,s.name oc_name,o.oc_targetlevel,s.isu,s.reco_score,g.grade_code 
    		from subject s,grade g,open_class o
		where s.code = o.oc_code and g.lec_code = o.oc_code and g.std_id = #{id} and s.isu ='교양필수'
	</select>
	
	<insert id="creditRenounceApply">
		insert into CreditRenounce values(CreditRenounce_seq.nextval,#{id},#{code},sysdate,'신청')
	</insert>
	
	<select id="checkCreditRenounceApply" resultType="kh.spring.dto.ChangeDeptApplyDTO">
		select * from CreditRenounce where id=#{id} and renounceSubject=#{code}
	</select>
	
	<delete id="creditRenounceCancel">
		delete from CreditRenounce where id=#{id} and renounceSubject=#{code}
	</delete>
	
	<insert id="gotCertification">
		insert into Certification values(Certification_seq.nextval,#{id},#{name},sysdate)
	</insert>
	
	<select id="gotMyCertification" resultType="kh.spring.dto.GotMyCertificationDTO">
		select CONCAT(CONCAT(to_char(cer_date,'yyyy'),'-'),seq) cer_seq,cer_name,to_char(cer_date,'""YYYY"년"MM"월"DD"일" hh24"시"mi"분"ss"초"') cer_date  from Certification where id=#{id} order by seq desc
	</select>
	
	<select id="majorGotCredit" resultType="Integer">
		select NVL(sum(s.reco_score),0) from subject s,grade g where g.lec_code = s.code and g.std_id=#{id} and s.isu = '전공필수'
	</select>
	
	<select id="majorGetCredit" resultType="Integer">
		select NVL(sum(s.reco_score),0) from subject s,open_class o,ClassRegistration c where o.oc_code = s.code and c.lec_code = o.oc_code and c.id=#{id} and s.isu = '전공필수'
	</select>
	
	<select id="totalGotCredit" resultType="Integer">
		select NVL(sum(s.reco_score),0) from subject s,grade g where g.lec_code = s.code and g.std_id=#{id}
	</select>
	
	<select id="totalGetCredit" resultType="Integer">
		select NVL(sum(s.reco_score),0) from subject s,open_class o,ClassRegistration c where o.oc_code = s.code and c.lec_code = o.oc_code and c.id=#{id}
	</select>
	
	<select id="electivesGotCredit" resultType="Integer">
		select NVL(sum(s.reco_score),0) from subject s,grade g where g.lec_code = s.code and g.std_id=#{id} and s.isu = '교양필수'
	</select>
	
	<select id="electivesGetCredit" resultType="Integer">
		select NVL(sum(s.reco_score),0) from subject s,open_class o,ClassRegistration c where o.oc_code = s.code and c.lec_code = o.oc_code and c.id=#{id} and s.isu = '교양필수'
	</select>
	
	<select id="choiceGotCredit" resultType="Integer">
		select NVL(sum(s.reco_score),0) from subject s,grade g where g.lec_code = s.code and g.std_id=#{id} and s.isu in('전공선택','교양선택')
	</select>
	
	<select id="choiceGetCredit" resultType="Integer">
		select NVL(sum(s.reco_score),0) from subject s,open_class o,ClassRegistration c where o.oc_code = s.code and c.lec_code = o.oc_code and c.id=#{id} and s.isu in('전공선택','교양선택')
	</select>
	
	<select id="getMyMenu" resultType="kh.spring.dto.MyMenuDTO">
		select MENU_CD,UP_MENU_CD,MENU_NM,MENU_LVL,PGM_PATH,PGM_ID from mymenu where id=#{id}
	</select>
	
	<insert id="myMenuAdd">
		insert into mymenu values(#{id},#{MENU_CD},#{UP_MENU_CD},#{MENU_NM},#{MENU_LVL},#{PGM_PATH},#{PGM_ID})
	</insert>
	
	<delete id="myMenuDel">
		delete from mymenu where id=#{id} and MENU_NM=#{MENU_NM}
	</delete>
	
	<select id="checkMyMenu" resultType="kh.spring.dto.MyMenuDTO">
		select * from mymenu where id=#{id} and MENU_NM=#{MENU_NM}
	</select>
	
	<select id="getCollege" resultType="kh.spring.dto.CollegeDTO">
		select * from college 
	</select>
	
	<select id="getDepartment" resultType="kh.spring.dto.CollegeDTO">
		select CONCAT(c.col_code,d.dept_code) col_code,d.dept_title col_title from department d, college c where d.col_code = c.col_code
	</select>

</mapper>