<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Admin">
<!-- 공지글 가져오기 -->
<select id="getNotice" resultType="kh.spring.dto.NoticeDTO">
	SELECT * FROM BOARD_NOTICE WHERE NOTI_SEQ=#{noti_seq}
</select>

<!-- 공지게시판 목록 가져오기 -->
<select id="getBoardNotice" resultType="kh.spring.dto.NoticeDTO">
	SELECT BOARD_NOTICE.*, ROW_NUMBER() OVER(ORDER BY NOTI_SEQ DESC) AS RANK
		FROM BOARD_NOTICE
		WHERE CATEGORY=#{category}
</select>

<!-- 공지사항 검색 -->
<select id="searchNotice" resultType="kh.spring.dto.NoticeDTO">
	SELECT BOARD_NOTICE.*, ROW_NUMBER() OVER(ORDER BY NOTI_SEQ DESC) AS RANK
		FROM BOARD_NOTICE
	<trim prefix="WHERE">
		<if test='search_keyword!="" and !"title_contents".equals(search_target)'>
			${search_target} LIKE '%'||#{search_keyword}||'%'
		</if>
		<if test='search_keyword!="" and "title_contents".equals(search_target)'>
			(NOTI_TITLE LIKE '%'||#{search_keyword}||'%' OR NOTI_CONTENTS LIKE '%'||#{search_keyword}||'%')
		</if>
	</trim>
		AND CATEGORY=#{category}
</select>

<!-- 공지사항 삭제 -->
<delete id="deleteNotice">
	DELETE FROM BOARD_NOTICE WHERE NOTI_SEQ IN 
 	<foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
 		#{item.noti_seq}
 	</foreach>
</delete>

<!-- 공지사항 작성 -->
<insert id="writeNotice">
	INSERT INTO BOARD_NOTICE VALUES(board_noti_seq.nextval,#{noti_title},#{noti_contents},sysdate,#{category})
	<selectKey keyProperty="noti_seq" resultType="Integer">
			select board_noti_seq.currval as noti_seq from dual
	</selectKey>
</insert>

<!-- 공지사항 수정 -->
<update id="modifyNotice">
	UPDATE BOARD_NOTICE SET NOTI_TITLE=#{noti_title}, NOTI_CONTENTS=#{noti_contents} WHERE NOTI_SEQ=#{noti_seq}
</update>

<!-- 게시판 가져오기 -->
<select id="getBoard" resultType="kh.spring.dto.BoardDTO">
   	SELECT SEQ, B.TITLE, CONTENTS, WRITER, WRITEDATE, D.TITLE BOARDTYPE, ROW_NUMBER() OVER(ORDER BY SEQ DESC) AS RANK
   		FROM BOARD B, BOARD_DIVISION D
   		WHERE CODE=DIVISION_CODE AND D.TITLE=#{bdDiv}

</select>

<!-- 게시글 검색 -->
<select id="searchBoard" resultType="kh.spring.dto.BoardDTO" parameterType="java.util.Map">
	SELECT SEQ, B.TITLE, CONTENTS, WRITER, WRITEDATE, D.TITLE DIV, ROW_NUMBER() OVER(ORDER BY SEQ DESC) AS RANK
		FROM BOARD B, BOARD_DIVISION D
		WHERE CODE=DIVISION_CODE AND D.TITLE=#{boardType}
	<trim prefix="AND (" suffix=")">
		<if test='search_keyword!=null and !"title_contents".equals(search_target)'>
			${search_target} LIKE '%'||#{search_keyword}||'%'
		</if>
		<if test='search_keyword!="" and "title_contents".equals(search_target)'>
			(B.TITLE LIKE '%'||#{search_keyword}||'%' OR CONTENTS LIKE '%'||#{search_keyword}||'%')
		</if>
	</trim>
</select>

<!-- 게시글 삭제 -->
<delete id="deletePosts">
	DELETE FROM BOARD WHERE DIVISION_CODE=(SELECT CODE FROM BOARD_DIVISION WHERE TITLE=#{boardType}) AND SEQ IN
	<foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
		#{item.seq}
	</foreach>
</delete>

<!-- 게시판 수정하기 -->
<update id="updateBoard">
	update board set title=#{title},contents=#{contents} where seq=#{seq}
</update>

<!-- 게시글 가져오기 -->
<select id="getPost" resultType="kh.spring.dto.BoardDTO">
	SELECT
		SEQ, DIVISION_CODE AS CATEGORY, D.TITLE AS BOARDTYPE, B.TITLE, CONTENTS, WRITER, WRITEDATE
		FROM BOARD B, BOARD_DIVISION D
		WHERE DIVISION_CODE = CODE AND SEQ=#{seq}
</select>

<!-- 게시글 작성 -->
<insert id="writePost">
	INSERT INTO BOARD VALUES(board_seq.nextval,#{division_code},#{title},#{contents},#{writer},sysdate)
</insert>

<!-- 게시글 수정 -->
<update id="modifyPost">
	UPDATE BOARD SET TITLE=#{title}, CONTENTS=#{contents} WHERE SEQ=#{seq} AND DIVISION_CODE=(SELECT CODE FROM BOARD_DIVISION WHERE TITLE=#{boardType})
</update>


<!-- 단과대 목록 -->
<select id="getCollege" resultType="kh.spring.dto.CollegeDTO">
	SELECT * FROM COLLEGE
</select>
<!-- 학과 목록 -->
<select id="getDepartment" resultType="kh.spring.dto.DepartmentDTO">
	SELECT * FROM DEPARTMENT
</select>


<!-- 교수 정보 -->
<select id="getProfessor" resultType="kh.spring.dto.ProfessorDTO">
	SELECT
	    U.ID, NAME, BIRTH, GENDER, COUNTRY, INDATE, OUTDATE, COLCODE, DEPTCODE, C.COL_TITLE, D.DEPT_TITLE,
	    ZIPCODE, ADDR1, ADDR2, EMAIL, PHONE, BANK, ACCOUNTNUM, PRO_OFFICE, PRO_STATUS
	FROM USERS U, PROFESSOR P, COLLEGE C, DEPARTMENT D
	WHERE U.ID=P.PRO_ID AND COLCODE=C.COL_CODE AND DEPTCODE=D.DEPT_CODE
	ORDER BY U.ID
</select>

<insert id="addProfessor">
	INSERT ALL
		INTO USERS(ID, PW, NAME, BIRTH, GENDER, COUNTRY, INDATE, OUTDATE, COLCODE, DEPTCODE, ZIPCODE, ADDR1, ADDR2, EMAIL, PHONE, BANK, ACCOUNTNUM)
		VALUES(#{id},#{pw},#{name},#{birth},#{gender},#{country},#{inDate},#{outDate,jdbcType=DATE},#{colcode},#{deptcode},
				#{zipcode},#{addr1},#{addr2},#{email},#{phone},#{bank},#{accountnum})
		INTO PROFESSOR(PRO_ID,PRO_OFFICE,PRO_STATUS)
		VALUES(#{id},#{pro_office},#{pro_status})
		SELECT * FROM DUAL
</insert>

<update id="modifyProfessorU">
	UPDATE USERS
		SET NAME=#{name},BIRTH=#{birth},GENDER=#{gender},COUNTRY=#{country},
			INDATE=#{inDate},OUTDATE=#{outDate, jdbcType=DATE},COLCODE=#{colcode},DEPTCODE=#{deptcode},
			ZIPCODE=#{zipcode},ADDR1=#{addr1},ADDR2=#{addr2},EMAIL=#{email},PHONE=#{phone},
			BANK=#{bank},ACCOUNTNUM=#{accountnum}
		WHERE ID=#{id}
</update>
<update id="modifyProfessorP">
	UPDATE PROFESSOR SET PRO_OFFICE=#{pro_office}, PRO_STATUS=#{pro_status} WHERE PRO_ID=#{id}
</update>

<delete id="deleteProfessorU">
	DELETE FROM USERS WHERE ID=#{id}
</delete>
<delete id="deleteProfessorP">
	DELETE FROM PROFESSOR WHERE PRO_ID=#{id}
</delete>


<!-- 학생 정보 -->
<select id="getStudent" resultType="kh.spring.dto.StudentDTO">
    SELECT
    	U.ID, NAME, BIRTH, GENDER, COUNTRY, INDATE, OUTDATE, COLCODE, DEPTCODE, C.COL_TITLE, D.DEPT_TITLE,
	    ZIPCODE, ADDR1, ADDR2, EMAIL, PHONE, BANK, ACCOUNTNUM, STD_STATUS, STD_YEAR
	FROM USERS U, STUDENTS S, COLLEGE C, DEPARTMENT D
	WHERE U.ID=S.ID AND COLCODE=C.COL_CODE AND DEPTCODE=D.DEPT_CODE
	ORDER BY U.ID
</select>

<select id="getMilitaryInfo" resultType="kh.spring.dto.MilitaryDTO">
	SELECT
		STD_CODE, MIL_INDATE, MIL_OUTDATE, M.MIL_GROUPCODE, MIL_RANK, MIL_CODE
		FROM MILITARY M, MILITARYGROUP G
		WHERE M.MIL_GROUPCODE=G.MIL_GROUPCODE
</select>

<insert id="addMilInfo">
	INSERT INTO MILITARY VALUES(#{std_code},#{mil_inDate},#{mil_outDate},#{mil_groupCode},#{mil_rank},#{mil_code})
</insert>

<update id="modifyMilInfo">
	UPDATE MILITARY SET MIL_INDATE=#{mil_inDate}, MIL_OUTDATE=#{mil_outDate}, MIL_GROUPCODE=#{mil_groupCode}, MIL_RANK=#{mil_rank},MIL_CODE=#{mil_code} WHERE STD_CODE=#{std_code}
</update>

<insert id="addStudent">
	INSERT ALL
		INTO USERS(ID, PW, NAME, BIRTH, GENDER, COUNTRY, INDATE, OUTDATE, COLCODE, DEPTCODE, ZIPCODE, ADDR1, ADDR2, EMAIL, PHONE, BANK, ACCOUNTNUM)
		VALUES(#{id},#{pw},#{name},#{birth},#{gender},#{country},#{inDate},#{outDate,jdbcType=DATE},#{colcode},#{deptcode},
				#{zipcode},#{addr1},#{addr2},#{email},#{phone},#{bank},#{accountnum})
		INTO STUDENTS(ID,STD_STATUS, STD_YEAR)
		VALUES(#{id},#{std_status},#{std_year})
		SELECT * FROM DUAL
</insert>

<update id="modifyStudentU">
	UPDATE USERS
		SET NAME=#{name},BIRTH=#{birth},GENDER=#{gender},COUNTRY=#{country},
			INDATE=#{inDate},OUTDATE=#{outDate},COLCODE=#{colcode},DEPTCODE=#{deptcode},
			ZIPCODE=#{zipcode},ADDR1=#{addr1},ADDR2=#{addr2},EMAIL=#{email},PHONE=#{phone},
			BANK=#{bank},ACCOUNTNUM=#{accountnum}
		WHERE ID=#{id}
</update>
<update id="modifyStudentS">
	UPDATE STUDENTS SET	STD_YEAR=#{std_year},STD_STATUS=#{std_status} WHERE ID=#{id}
</update>

<delete id="deleteStudentU">
	DELETE FROM USERS WHERE ID=#{id}
</delete>
<delete id="deleteStudentS">
	DELETE FROM STUDENTS WHERE ID=#{id}
</delete>


<select id="getSyllabus" resultType="kh.spring.dto.LectureDTO">
	SELECT LECTURE.*, EXTRACT(YEAR FROM OC_YEAR) AS OC_YEAR FROM LECTURE,OPEN_CLASS WHERE LEC_CODE=OC_CODE
</select>

<update id="syllabusApproved">
	UPDATE LECTURE SET LEC_APPROVAL=#{lec_approval} WHERE LEC_CODE=#{lec_code}
</update>

<update id="updateOcSchedule">
	UPDATE OPEN_CLASS SET OC_SCHEDULE=#{lec_schedule} WHERE OC_CODE=#{lec_code}
</update>

<update id="updateSubjectTitle">
	UPDATE SUBJECT SET NAME=#{lec_title} WHERE CODE=#{lec_code}
</update>

<update id="classOpened">
	UPDATE OPEN_CLASS SET OC_IS_CLOSE='N' WHERE OC_CODE=#{lec_code}
</update>

<update id="syllabusRejected">
	UPDATE LECTURE SET LEC_DENY_REASON=#{lec_deny_reason}, LEC_APPROVAL='-1' WHERE LEC_CODE=#{lec_code}
</update>

<select id="getBuildInfo" resultType="kh.spring.dto.BuildDTO">
	SELECT * FROM BUILDINFO
</select>

<select id="getClassroomInfo" resultType="kh.spring.dto.ClassroomDTO">
	SELECT * FROM CLASSROOMINFO
</select>

<select id="searchClsTimetable" resultType="kh.spring.dto.LectureDTO">
	SELECT LEC_CODE, LEC_TITLE, PRO_NAME, LEC_SCHEDULE, LEC_CLASSROOM, LEC_SEMESTER, EXTRACT(YEAR FROM OC_YEAR) AS OC_YEAR
		FROM LECTURE, OPEN_CLASS
		WHERE LEC_CODE=OC_CODE
			AND LEC_CLASSROOM=#{classroom}
			AND LEC_APPROVAL='1'
			AND TO_CHAR(EXTRACT(YEAR FROM OC_YEAR))=#{year}
			AND LEC_SEMESTER=#{semester}
</select>

<select id="getColSchedule" resultType="kh.spring.dto.ColScheduleDTO">
	SELECT * FROM COL_SCHEDULE
</select>

<insert id="addColSchedule">
	INSERT INTO COL_SCHEDULE VALUES(COL_SCHEDULE_SEQ.NEXTVAL,#{title},#{contents},#{sche_startDate},#{sche_endDate},#{type})
</insert>

<update id="updateColSchedule">
	UPDATE COL_SCHEDULE
		SET TITLE=#{title},
			CONTENTS=#{contents},
			SCHE_STARTDATE=#{sche_startDate},
			SCHE_ENDDATE=#{sche_endDate},
			TYPE=#{type}
		WHERE SEQ=#{seq}
</update>

<delete id="delColSchedule">
	DELETE FROM COL_SCHEDULE WHERE SEQ=#{seq}
</delete>


<select id="getChangeDeptApply" resultType="kh.spring.dto.ChangeDeptApplyDTO">
	WITH USERINFO AS (SELECT
						ID, NAME, COL_TITLE AS COLTITLE, DEPT_TITLE AS DEPTTITLE
	                    FROM USERS, DEPARTMENT D, COLLEGE C
	                    WHERE COLCODE=C.COL_CODE AND DEPTCODE=D.DEPT_CODE)
	SELECT
		A.SEQ, A.ID, NAME, COLTITLE, DEPTTITLE, CHANGEYEAR, CHANGESEMESTER, REASON, COL_TITLE AS CHANGECOLLEGE, DEPT_TITLE AS CHANGEDEPT, APPLY_DATE, APPLY_APPROVE
	    FROM CHANGEDEPTAPPLY A, DEPARTMENT D, COLLEGE C, USERINFO U
	    WHERE C.COL_CODE=CHANGECOLLEGE AND D.DEPT_CODE=CHANGEDEPT AND A.ID=U.ID
</select>

<update id="changeDeptApproval">
	UPDATE CHANGEDEPTAPPLY SET APPLY_APPROVE=#{apply_approve} WHERE SEQ=#{seq}
</update>

<select id="getTakeOffApply" resultType="kh.spring.dto.TakeOffApplyDTO">
	SELECT
	    A.SEQ, A.ID, NAME, C.COL_TITLE, D.DEPT_TITLE, REASON, TAKEOFF_YEAR, TAKEOFF_SEMESTER, EXPECTEDRETURNYEAR, APPLY_DATE, APPLY_APPROVE
	    FROM TAKEOFFAPPLY A, USERS U, DEPARTMENT D, COLLEGE C
	    WHERE A.ID=U.ID AND U.DEPTCODE=D.DEPT_CODE AND C.COL_CODE=U.COLCODE
</select>

<update id="takeOffApproval">
	UPDATE TAKEOFFAPPLY SET APPLY_APPROVE=#{apply_approve} WHERE SEQ=#{seq}
</update>

<select id="getReturnApply" resultType="kh.spring.dto.ReturnApplyDTO">
	SELECT
    	SEQ, A.ID, NAME, COL_TITLE, DEPT_TITLE, REASON, RETURN_YEAR, RETURN_SEMESTER, APPLY_DATE, APPLY_APPROVE    
    	FROM RETURNAPPLY A, USERS U, COLLEGE C, DEPARTMENT D
    	WHERE A.ID=U.ID AND U.COLCODE=C.COL_CODE AND U.DEPTCODE=D.DEPT_CODE
</select>

<update id="returnApproval">
	UPDATE RETURNAPPLY SET APPLY_APPROVE=#{apply_approve} WHERE SEQ=#{seq}
</update>

<select id="getCreditRenounce" resultType="kh.spring.dto.CreditRenounceDTO">
	SELECT
		SEQ, A.ID, U.NAME, COL_TITLE, DEPT_TITLE, S.NAME AS LEC_TITLE, GRADE_CODE, RECO_SCORE, APPLY_DATE, APPLY_APPROVE
	    FROM CREDITRENOUNCE A, USERS U, GRADE, SUBJECT S, COLLEGE C, DEPARTMENT D
	    WHERE A.ID=STD_ID AND A.ID=U.ID AND U.COLCODE=C.COL_CODE AND U.DEPTCODE=D.DEPT_CODE AND RENOUNCESUBJECT=LEC_CODE AND RENOUNCESUBJECT=CODE
</select>

<update id="creditRenounceApproval">
	UPDATE CREDITRENOUNCE SET APPLY_APPROVE=#{apply_approve} WHERE SEQ=#{seq}
</update>

<select id="getCloudStorage" resultType="kh.spring.dto.CloudStorageDTO">
	SELECT C.ID, NAME, MAXSTORAGE FROM CLOUDSTORAGE C, USERS U WHERE C.ID=U.ID ORDER BY C.ID
</select>

<update id="modifyCloudStorage" parameterType="java.util.List">
	<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";">
		UPDATE CLOUDSTORAGE SET MAXSTORAGE=#{item.maxStorage} WHERE ID=#{item.id}
	</foreach>
</update>
</mapper>